<?php

namespace ContainerDX3Qcy5;

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;
use Symfony\Component\DependencyInjection\ContainerInterface;
use Symfony\Component\DependencyInjection\Exception\RuntimeException;

/**
 * @internal This class has been auto-generated by the Symfony Dependency Injection Component.
 */
class getApiTokenAuthenticatorService extends App_KernelDevDebugContainer
{
    /**
     * Gets the private 'App\Security\ApiTokenAuthenticator' shared autowired service.
     *
     * @return \App\Security\ApiTokenAuthenticator
     */
    public static function do($container, $lazyLoad = true)
    {
        include_once \dirname(__DIR__, 4).''.\DIRECTORY_SEPARATOR.'vendor'.\DIRECTORY_SEPARATOR.'symfony'.\DIRECTORY_SEPARATOR.'security-http'.\DIRECTORY_SEPARATOR.'Authenticator'.\DIRECTORY_SEPARATOR.'AuthenticatorInterface.php';
        include_once \dirname(__DIR__, 4).''.\DIRECTORY_SEPARATOR.'vendor'.\DIRECTORY_SEPARATOR.'symfony'.\DIRECTORY_SEPARATOR.'security-http'.\DIRECTORY_SEPARATOR.'Authenticator'.\DIRECTORY_SEPARATOR.'AbstractAuthenticator.php';
        include_once \dirname(__DIR__, 4).''.\DIRECTORY_SEPARATOR.'vendor'.\DIRECTORY_SEPARATOR.'symfony'.\DIRECTORY_SEPARATOR.'security-http'.\DIRECTORY_SEPARATOR.'EntryPoint'.\DIRECTORY_SEPARATOR.'AuthenticationEntryPointInterface.php';
        include_once \dirname(__DIR__, 4).''.\DIRECTORY_SEPARATOR.'src'.\DIRECTORY_SEPARATOR.'Security'.\DIRECTORY_SEPARATOR.'ApiTokenAuthenticator.php';

        $a = ($container->privates['App\\Service\\ApiService'] ?? $container->load('getApiServiceService'));

        if (isset($container->privates['App\\Security\\ApiTokenAuthenticator'])) {
            return $container->privates['App\\Security\\ApiTokenAuthenticator'];
        }

        return $container->privates['App\\Security\\ApiTokenAuthenticator'] = new \App\Security\ApiTokenAuthenticator($a, ($container->privates['App\\Security\\UserProvider'] ?? $container->load('getUserProviderService')), ($container->services['router'] ?? self::getRouterService($container)));
    }
}
